server:
  port: 8080

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/

logging:
  level:
    # log 级别
    org.springframework.cloud.gateway: debug

spring:
  profiles:
    # 指定配置
    # route_simple：简单尝试
    # route_stripPrefix：截取请求
    # route_uri：转发指定地址并传入参数
    # route_addRequestParameter：转发指定服务并传入参数
    # route_hystrix：熔断
    # route_requestRateLimiter：限流
    # route_all：综合
    active: route_hystrix


---

spring:
  # 配置文件名称，用来标识不同环境的配置。由 spring.profiles.active 的值来决定使用哪组配置。
  ## 综合
  profiles: route_all
  redis:
    host: localhost
    port: 6379
    database: 0
  application:
    # 应用名称
    name: gateway-demo
  cloud:
    gateway:
      discovery:
        locator:
          # 是否和服务注册与发现组件结合，设置为 true 后可以直接使用应用名称调用服务
          enabled: true
      # 路由（routes：路由，它由唯一标识（ID）、目标服务地址（uri）、一组断言（predicates）和一组过滤器组成（filters）。filters 不是必需参数。）
      routes:
      - id: route_second
        uri: lb://portalserver-demo
        predicates:
         - Path=/portalserver-demo/**
         - Method=GET
         - Header=serverName,psd
#         - Host=**.foo.org
#         - Path=/headers
#         - Method=GET
#         - Header=X-Request-Id, \d+
#         - Query=foo, ba.
#         - Query=baz
#         - Cookie=chocolate, ch.p
#         - After=2018-01-20T06:06:06+08:00[Asia/Shanghai]
        filters:
        - name: RequestTime
          args:
            type: customer
            op: root
      # 路由标识（id：标识，具有唯一性）   综合
      - id: route_all
        # 目标服务地址（uri：地址，请求转发后的地址）
        uri: lb://portal-demo
        # 路由条件（predicates：断言，匹配 HTTP 请求内容）
        predicates:
        ## 转发地址格式为 uri/routeAll，/all 部分会被下面的过滤器给截取掉
         - Path=/portal-demo/**
        ## 匹配 GET 请求
         - Method=GET
#        - Header=serverName,pd
        # 过滤器（filters：过滤器，过滤规则）
        filters:
        ## 截取路径位数
#        - StripPrefix=1
        ## 添加指定参数
        - AddRequestParameter=name, HH&id=12
        ## 熔断
#        - name: Hystrix
#          args:
##            retries：重试次数，默认值是 3 次。
##            statuses：HTTP 的状态返回码，取值请参考：org.springframework.http.HttpStatus。
##            methods：指定哪些方法的请求需要进行重试逻辑，默认值是 GET 方法，取值参考：org.springframework.http.HttpMethod。
##            series：一些列的状态码配置，取值参考：org.springframework.http.HttpStatus.Series。符合的某段状态码才会进行重试逻辑默认值是 SERVER_ERROR，值是 5，也就是 5XX(5 开头的状态码)，共有5个值。
##            使用上述配置进行测试，当后台服务不可用时，会在控制台看到请求三次的日志，证明此配置有效。
#            name: huanghai
#            retries: 3 # retries：重试次数
#            status: 503 # http状态码
#            ### fallback 时调用的方法 http://localhost:8080/fallback
#            fallbackUri: forward:/fallback

#     ## 限流
#     1. 注意此处是结合 redis 实现的限流，所以 filter 过滤器的 name 必须为 RequestRateLimiter
#     2. 并且通过实现 KeyResolver 类来自定义限流策略
#     3. 启动本地 redis（redis-server.exe） 服务
#    4. 启动注册中心工程（registry-service）,网关工程（master-service）和服务工程 A/B（a-service、b-service）
#    5. 项目启动成功后访问：http://localhost:8080/**
#    6. 此时限流却无论如何都不生效，原因有如下两点
#        ① redis-server 版本过低！我 Windows 本地是 redis-2.4.2 版本的，要用 3 以上的版本！！！
#        ② 数据在 redis 中存储的时间只有几秒，所以得使用 monitor 指令来动态的观察！！！
#    7. 打开 redis-cli.exe，输入命令 monitor 
#    8. 快速刷新地址：http://localhost:8000/age
#    9. 页面上会出现 429，redis-cli.exe 中会出现很多数据交互（request_rate_limiter.xxx 开头的 key）
#   10. 证明限流成功
        - name: RequestRateLimiter
          args:
            ### 限流过滤器的 Bean 名称
            key-resolver: '#{@uriKeyResolver}'
            ### 希望允许用户每秒处理多少个请求
            redis-rate-limiter.replenishRate: 1
            ### 用户允许在一秒钟内完成的最大请求数
            redis-rate-limiter.burstCapacity: 3


hystrix:
  command:
    fallbackcmd:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 5000 #超时时间，若不设置超时时间则有可能无法触发熔断



---
spring:
  profiles: route_simple  # route_simple：简单尝试
  application:
    name: gateway-demo
  cloud:
    gateway:
      discovery:
        locator:
          # 是否和服务注册与发现组件结合，设置为 true 后可以直接使用应用名称调用服务
          enabled: true
      # 路由（routes：路由，它由唯一标识（ID）、目标服务地址（uri）、一组断言（predicates）和一组过滤器组成（filters）
      # filters 不是必需参数。）
      routes:
      # 路由标识（id：标识，具有唯一性）   简单尝试
      - id: route_simple
        # 目标服务地址（uri：地址，请求转发后的地址）
        uri: http://localhost:8085
        # 路由条件（predicates：断言，匹配 HTTP 请求内容）
        predicates:
        ## 转发地址格式为 uri/archive
        - Path=/portal-demo/sayHelloworld2


---

spring:
  profiles: route_stripPrefix  # route_stripPrefix：截取请求
  application:
    name: gateway-demo
  cloud:
    gateway:
      discovery:
        locator:
          # 是否和服务注册与发现组件结合，设置为 true 后可以直接使用应用名称调用服务
          enabled: true
      # 路由（routes：路由，它由唯一标识（ID）、目标服务地址（uri）、一组断言（predicates）和一组过滤器组成（filters）
      # filters 不是必需参数。）
      routes:
      # 路由标识（id：标识，具有唯一性）   截取请求
      - id: route_stripPrefix
        # 目标服务地址（uri：地址，请求转发后的地址）
        uri: http://localhost:8085
        # 路由条件（predicates：断言，匹配 HTTP 请求内容）
        predicates:
        ## 转发地址格式为 uri/archive，/str 部分会被下面的过滤器给截取掉
        - Path=/str/portal-demo/sayHelloworld2
        filters:
        ## 截取路径位数
        - StripPrefix=1


---
spring:
  # 配置文件名称，用来标识不同环境的配置。由 spring.profiles.active 的值来决定使用哪组配置。
  ## 转发指定地址并传入参数
  profiles: route_uri
  application:
    # 应用名称
    name: gateway-demo
  cloud:
    gateway:
      discovery:
        locator:
          # 是否和服务注册与发现组件结合，设置为 true 后可以直接使用应用名称调用服务
          enabled: true
      # 路由（routes：路由，它由唯一标识（ID）、目标服务地址（uri）、一组断言（predicates）和一组过滤器组成（filters）。filters 不是必需参数。）
      routes:
      # 路由标识（id：标识，具有唯一性）   转发指定地址并传入参数
      - id: route_uri
        # 目标服务地址（uri：地址，请求转发后的地址）
        uri: http://localhost:8085
        # 路由条件（predicates：断言，匹配 HTTP 请求内容）
        predicates:
        ## 匹配 GET 请求
        - Method=GET
        # 过滤器（filters：过滤器，过滤规则）
        filters:
        ## 添加指定参数 一个参数
        # - AddRequestParameter=name, zwc
        ## 添加指定参数 多个参数
        - AddRequestParameter=name, zwc&id=1

---
spring:
  # 配置文件名称，用来标识不同环境的配置。由 spring.profiles.active 的值来决定使用哪组配置。
  ## 转发指定服务并传入参数
  profiles: route_addRequestParameter
  application:
    # 应用名称
    name: gateway-demo
  cloud:
    gateway:
      discovery:
        locator:
          # 是否和服务注册与发现组件结合，设置为 true 后可以直接使用应用名称调用服务
          enabled: true
      # 路由（routes：路由，它由唯一标识（ID）、目标服务地址（uri）、一组断言（predicates）和一组过滤器组成（filters）。filters 不是必需参数。）
      routes:
      # 路由标识（id：标识，具有唯一性）   转发指定服务并传入参数
      - id: route_addRequestParameter
        # 目标服务地址（uri：地址，请求转发后的地址）
        uri: lb://portal-demo
        # 路由条件（predicates：断言，匹配 HTTP 请求内容）
        predicates:
        ## 匹配 GET 请求
        - Method=GET
        # 过滤器（filters：过滤器，过滤规则）
        filters:
        ## 添加指定参数 一个参数
        # - AddRequestParameter=name, zwc
        ## 添加指定参数 多个参数
        - AddRequestParameter=name, zwc&id=2


---
spring:
  # 配置文件名称，用来标识不同环境的配置。由 spring.profiles.active 的值来决定使用哪组配置。
  ## 熔断
  profiles: route_hystrix
  application:
    # 应用名称
    name: gateway-demo
  cloud:
    gateway:
      discovery:
        locator:
          # 是否和服务注册与发现组件结合，设置为 true 后可以直接使用应用名称调用服务
          enabled: true
      # 路由（routes：路由，它由唯一标识（ID）、目标服务地址（uri）、一组断言（predicates）和一组过滤器组成（filters）。filters 不是必需参数。）
      routes:
      # 路由标识（id：标识，具有唯一性）   熔断
      - id: route_hystrix
        # 目标服务地址（uri：地址，请求转发后的地址）
        uri: lb://portal-demo
        # 路由条件（predicates：断言，匹配 HTTP 请求内容）
        predicates:
        ## 匹配 GET 请求
        - Method=GET
        # 过滤器（filters：过滤器，过滤规则）
        filters:
        ## 添加指定参数
        - AddRequestParameter=name, hj&id=0
        ## 熔断
        - name: Hystrix
          args:
            name: huanghai健
            ### fallback 时调用的方法 http://localhost:8080/fallback
            fallbackUri: forward:/fallback


hystrix:
  command:
    fallbackcmd:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 5000 #超时时间，若不设置超时时间则有可能无法触发熔断




---
spring:
  # 配置文件名称，用来标识不同环境的配置。由 spring.profiles.active 的值来决定使用哪组配置。
  ## 限流
  profiles: route_requestRateLimiter
  redis:
    host: localhost
    port: 6379
    database: 0
  application:
    # 应用名称
    name: gateway-demo
  cloud:
    gateway:
      discovery:
        locator:
          # 是否和服务注册与发现组件结合，设置为 true 后可以直接使用应用名称调用服务
          enabled: true
      # 路由（routes：路由，它由唯一标识（ID）、目标服务地址（uri）、一组断言（predicates）和一组过滤器组成（filters）。filters 不是必需参数。）
      routes:
      # 路由标识（id：标识，具有唯一性）   限流
      - id: route_requestRateLimiter
        # 目标服务地址（uri：地址，请求转发后的地址）
        uri: lb://portal-demo
        # 路由条件（predicates：断言，匹配 HTTP 请求内容）
        predicates:
        ## 匹配 GET 请求
        - Method=GET
        # 过滤器（filters：过滤器，过滤规则）
        filters:
        ## 添加指定参数
        - AddRequestParameter=name, hj
        ## 限流
        - name: RequestRateLimiter
          args:
            ### 限流过滤器的 Bean 名称
            key-resolver: '#{@uriKeyResolver}'
            ### 希望允许用户每秒处理多少个请求
            redis-rate-limiter.replenishRate: 1
            ### 用户允许在一秒钟内完成的最大请求数
            redis-rate-limiter.burstCapacity: 3
